# Задание 1. Квадраты чисел
# Пользователь вводит число N.
# Напишите программу, которая генерирует последовательность из квадратов чисел от 1 до N
# (1 ** 2, 2 ** 2, 3 ** 2 и так далее).
# Реализацию напишите двумя способами: функция-генератор игенераторное выражение.
from typing import Iterator


def generator_function(n: int) -> Iterator[int]:

  for number in range(1, n + 1):

   yield number ** 2

def main() -> None:


    n = int(input('Введите число N: '))

    print('Вывод квадратов. Функция-генератор')

    for square in generator_function(n):
        print(square, end=' ')
    print('\n')

    print('Вывод квадратов. Генераторное выражение')

    generator_expr = (i ** 2 for i in range(1, n + 1))

    for square in generator_expr:
        print(square, end=' ')
    print()
main()

# Задача 2. Однострочный генератор словаря
# Напишите однострочный генератор словаря, который принимает на вход три
# списка одинаковой длины: имена str, ставка int, премия str с указанием
# процентов вида 10.25%.
# В результате result получаем словарь с именем в качестве ключа и суммой
# премии в качестве значения.
# Сумма рассчитывается как ставка умноженная на процент премии.
# Не забудьте распечатать в конце результат.

# Пример использования.
# На входе:
# names = ["Alice", "Bob", "Charlie"]
# salary = [5000, 6000, 7000]
# bonus = ["10%", "5%", "15%"]
# На выходе:
# {'Alice': 500.0, 'Bob': 300.0, 'Charlie': 1050.0}

def calculate_bonus(names, salary, bonus):
    result = {names[i]: round(salary[i] * float(bonus[i].strip('%')) / 100, 2) for i in range(len(names))}
    return result
    # Пример использования функции
    names = ["Alice", "Bob", "Charlie"]
    salary = [5000, 6000, 7000]
    bonus = ["10%", "5%", "15%"]
    result = calculate_bonus(names, salary, bonus)
    print(result)

# Задача 3. Генератор последовательности чисел Фибоначчи
# Напишите генераторную функцию fibonacci(n), которая принимает на вход
# одно целое число n и возвращает последовательность первых n чисел
# Фибоначчи. Числа Фибоначчи — это последовательность, в которой каждое
# число является суммой двух предыдущих, начиная с 0 и 1.

def fibonacci(n):
 # Начальные значения последовательности Фибоначчи: 0 и 1
    a, b = 0, 1
# Генерация первых n чисел Фибоначчи
    for _ in range(n):
        yield a # Возвращаем текущее значение a
        a, b = b, a + b # Обновляем значения a и b для следующей итерации
# Пример вывода первых 10 чисел Фибоначчи
for number in fibonacci(10):
    print(number)
